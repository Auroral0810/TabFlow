{"version":3,"file":"MemoryService.js","sources":["../src/utils/MemoryService.js"],"sourcesContent":["export class MemoryService {\n  constructor() {\n    this.memoryThreshold = 100 * 1024 * 1024; // 100MB\n    this.hibernatedTabs = new Set();\n    this.memoryStats = new Map();\n    this.lastAccessTimes = new Map();\n    this.debuggerConnections = new Map();\n    this.autoHibernateEnabled = true;\n    console.log('MemoryService initialized');\n    this.initializeListeners();\n    this.initializeDebugger();\n  }\n\n  async initializeListeners() {\n    // 监听标签页更新\n    chrome.tabs.onUpdated.addListener((tabId, changeInfo, tab) => {\n      if (changeInfo.status === 'complete') {\n        this.updateTabMemoryInfo(tabId);\n        this.lastAccessTimes.set(tabId, Date.now());\n      }\n    });\n\n    // 监听标签页激活\n    chrome.tabs.onActivated.addListener(({ tabId }) => {\n      this.lastAccessTimes.set(tabId, Date.now());\n    });\n\n    // 定期检查内存使用情况\n    setInterval(() => {\n      if (this.autoHibernateEnabled) {\n        this.checkAndHibernateTabs();\n      }\n    }, 60000); // 每分钟检查一次\n  }\n\n  async initializeDebugger() {\n    try {\n      // 获取所有可调试目标\n      const targets = await chrome.debugger.getTargets();\n      console.log('Available debug targets:', targets);\n      \n      // 为每个标签页附加调试器\n      for (const target of targets) {\n        if (target.type === 'page' && !this.debuggerConnections.has(target.tabId)) {\n          await this.attachDebugger(target.tabId);\n        }\n      }\n    } catch (error) {\n      console.error('Failed to initialize debugger:', error);\n    }\n  }\n\n  async attachDebugger(tabId) {\n    try {\n      await chrome.debugger.attach({ tabId }, '1.3');\n      console.log(`Debugger attached to tab ${tabId}`);\n      \n      // 启用内存相关的域\n      await chrome.debugger.sendCommand({ tabId }, 'Memory.enable');\n      this.debuggerConnections.set(tabId, true);\n    } catch (error) {\n      console.error(`Failed to attach debugger to tab ${tabId}:`, error);\n    }\n  }\n\n  getInactiveTime(tabId) {\n    const lastAccess = this.lastAccessTimes.get(tabId) || Date.now();\n    return Date.now() - lastAccess;\n  }\n\n  async updateTabMemoryInfo(tabId) {\n    try {\n      await this.cleanupStaleData();\n      console.log(`Updating memory info for tab ${tabId}`);\n      \n      let tab;\n      try {\n        tab = await chrome.tabs.get(tabId);\n      } catch (error) {\n        console.log(`Tab ${tabId} not found:`, error);\n        this.memoryStats.delete(tabId);\n        return null;\n      }\n\n      // 检查是否有权限访问该页面\n      const hasPermission = await this.checkTabPermission(tab.url);\n      if (!hasPermission) {\n        console.log(`No permission to access tab ${tabId}: ${tab.url}`);\n        const memoryInfo = this.createMemoryInfo(tabId, tab, 0);\n        this.memoryStats.set(tabId, memoryInfo);\n        return memoryInfo;\n      }\n\n      // 检查是否是 chrome:// URL\n      if (tab.url.startsWith('chrome://')) {\n        console.log(`Skipping chrome:// URL for tab ${tabId}`);\n        return {\n          memory: '0MB',\n          totalJS: 0,\n          timestamp: Date.now()\n        };\n      }\n\n      // 使用 chrome.scripting.executeScript 获取 performance.memory\n      const results = await chrome.scripting.executeScript({\n        target: { tabId },\n        func: () => {\n          if (performance && performance.memory) {\n            return {\n              usedJSHeapSize: performance.memory.usedJSHeapSize,\n              totalJSHeapSize: performance.memory.totalJSHeapSize,\n              jsHeapSizeLimit: performance.memory.jsHeapSizeLimit\n            };\n          }\n          return null;\n        }\n      });\n\n      if (results && results[0] && results[0].result) {\n        const memoryData = results[0].result;\n        const totalJS = Math.round(memoryData.totalJSHeapSize / (1024 * 1024));\n        \n        console.log(`Tab ${tabId} memory info:`, {\n          usedJS: `${Math.round(memoryData.usedJSHeapSize / (1024 * 1024))}MB`,\n          totalJS: `${totalJS}MB`,\n          limitJS: `${Math.round(memoryData.jsHeapSizeLimit / (1024 * 1024))}MB`\n        });\n\n        const memoryInfo = {\n          memory: `${totalJS}MB`,  // 直接存储格式化的字符串\n          totalJS: totalJS,        // 存储数值用于计算\n          timestamp: Date.now()\n        };\n\n        this.memoryStats.set(tabId, memoryInfo);\n        return memoryInfo;\n      }\n\n      // 如果无法获取 performance.memory 数据\n      return {\n        memory: '0MB',\n        totalJS: 0,\n        timestamp: Date.now()\n      };\n\n    } catch (error) {\n      console.log('Error in updateTabMemoryInfo:', error);\n      const errorInfo = this.createMemoryInfo(tabId, null, 0);\n      this.memoryStats.set(tabId, errorInfo);\n      return errorInfo;\n    }\n  }\n\n  async getMemoryInfo(tabId) {\n    try {\n      // 获取堆内存统计\n      const heapStats = await chrome.debugger.sendCommand(\n        { tabId },\n        'Memory.getDOMCounters'\n      );\n\n      // 获取详细的内存使用情况\n      const memoryInfo = await chrome.debugger.sendCommand(\n        { tabId },\n        'Memory.getPressureLevel'\n      );\n\n      return {\n        ...heapStats,\n        pressureLevel: memoryInfo.level,\n        timestamp: Date.now()\n      };\n    } catch (error) {\n      console.error(`Failed to get memory info for tab ${tabId}:`, error);\n      return null;\n    }\n  }\n\n  async getTabLastAccess(tabId) {\n    try {\n      // 尝试从存储中获取上次访问时间\n      const data = await chrome.storage.local.get(`lastAccess_${tabId}`);\n      const storedTime = data[`lastAccess_${tabId}`];\n      \n      if (storedTime) {\n        return storedTime;\n      }\n      \n      // 如果没有存储的时间，使用当前时间\n      const currentTime = Date.now();\n      await chrome.storage.local.set({ [`lastAccess_${tabId}`]: currentTime });\n      return currentTime;\n    } catch (error) {\n      console.error('Error getting last access time:', error);\n      return Date.now();\n    }\n  }\n\n  async checkAndHibernateTabs() {\n    const tabs = await chrome.tabs.query({});\n    for (const tab of tabs) {\n      if (this.shouldHibernate(tab)) {\n        await this.hibernateTab(tab);\n      }\n    }\n  }\n\n  shouldHibernate(tab) {\n    if (tab.active || tab.pinned || this.hibernatedTabs.has(tab.id)) {\n      return false;\n    }\n\n    const memoryInfo = this.memoryStats.get(tab.id);\n    const inactiveTime = this.getInactiveTime(tab.id);\n\n    return memoryInfo &&\n           memoryInfo.usedJSHeapSize > this.memoryThreshold &&\n           inactiveTime > 30 * 60 * 1000; // 30分钟未使用\n  }\n\n  async hibernateTab(tab) {\n    try {\n      // 保存标签页信息\n      await chrome.storage.local.set({\n        [`hibernated_${tab.id}`]: {\n          url: tab.url,\n          title: tab.title,\n          timestamp: Date.now()\n        }\n      });\n\n      // 将标签页替换为休眠页面\n      const hibernateUrl = chrome.runtime.getURL('/hibernate.html');\n      await chrome.tabs.update(tab.id, { url: hibernateUrl });\n\n      this.hibernatedTabs.add(tab.id);\n    } catch (error) {\n      console.error('休眠标签页失败:', error);\n    }\n  }\n\n  async restoreTab(tabId) {\n    try {\n      const data = await chrome.storage.local.get(`hibernated_${tabId}`);\n      const tabInfo = data[`hibernated_${tabId}`];\n      \n      if (tabInfo) {\n        await chrome.tabs.update(tabId, { url: tabInfo.url });\n        await chrome.storage.local.remove(`hibernated_${tabId}`);\n        this.hibernatedTabs.delete(tabId);\n        this.memoryStats.delete(tabId);\n      }\n    } catch (error) {\n      console.error('恢复标签页失败:', error);\n    }\n  }\n\n  setAutoHibernate(enabled) {\n    this.autoHibernateEnabled = enabled;\n  }\n\n  setMemoryThreshold(threshold) {\n    this.memoryThreshold = threshold * 1024 * 1024; // 转换为字节\n  }\n\n  getTabMemoryStats(tabId) {\n    const stats = this.memoryStats.get(tabId);\n    if (!stats) {\n      return {\n        memory: '0MB',\n        totalJS: 0,\n        timestamp: Date.now()\n      };\n    }\n    return stats;  // 直接返回存储的数据\n  }\n\n  isTabHibernated(tabId) {\n    return this.hibernatedTabs.has(tabId);\n  }\n\n  async updateLastAccess(tabId) {\n    const currentTime = Date.now();\n    this.lastAccessTimes.set(tabId, currentTime);\n    await chrome.storage.local.set({ [`lastAccess_${tabId}`]: currentTime });\n  }\n\n  async detachDebugger(tabId) {\n    if (this.debuggerConnections.has(tabId)) {\n      try {\n        await chrome.debugger.detach({ tabId });\n        this.debuggerConnections.delete(tabId);\n        console.log(`Debugger detached from tab ${tabId}`);\n      } catch (error) {\n        console.error(`Failed to detach debugger from tab ${tabId}:`, error);\n      }\n    }\n  }\n\n  getSystemMemoryUsage() {\n    let totalMemory = 0;\n    for (const stats of this.memoryStats.values()) {\n      totalMemory += stats.totalJS || 0;  // 使用 totalJS 数值\n    }\n    return totalMemory;\n  }\n\n  // 添加权限检查方法\n  async checkTabPermission(url) {\n    try {\n      // 检查是否是受限URL\n      if (url.startsWith('chrome://') || \n          url.startsWith('chrome-extension://') ||\n          url.startsWith('edge://') ||\n          url.startsWith('about:') ||\n          url.startsWith('file://')) {\n        return false;\n      }\n\n      // 检查是否有权限\n      const result = await chrome.permissions.contains({\n        origins: [new URL(url).origin + '/*']\n      });\n\n      if (!result) {\n        // 如果没有权限，尝试请求权限\n        try {\n          const granted = await chrome.permissions.request({\n            origins: [new URL(url).origin + '/*']\n          });\n          return granted;\n        } catch (error) {\n          console.log('Permission request failed:', error);\n          return false;\n        }\n      }\n\n      return result;\n    } catch (error) {\n      console.log('Error checking permission:', error);\n      return false;\n    }\n  }\n\n  async cleanupStaleData() {\n    try {\n      // 清理已关闭标签页的数据\n      const existingTabs = await chrome.tabs.query({});\n      const existingTabIds = new Set(existingTabs.map(tab => tab.id));\n      \n      // 清理内存统计数据\n      for (const tabId of this.memoryStats.keys()) {\n        if (!existingTabIds.has(tabId)) {\n          this.memoryStats.delete(tabId);\n        }\n      }\n      \n      // 清理最后访问时间数据\n      for (const tabId of this.lastAccessTimes.keys()) {\n        if (!existingTabIds.has(tabId)) {\n          this.lastAccessTimes.delete(tabId);\n        }\n      }\n      \n      // 清理休眠标签页数据\n      for (const tabId of this.hibernatedTabs) {\n        if (!existingTabIds.has(tabId)) {\n          this.hibernatedTabs.delete(tabId);\n        }\n      }\n    } catch (error) {\n      console.error('清理过期数据失败:', error);\n    }\n  }\n\n  createMemoryInfo(tabId, tab, memoryValue) {\n    return {\n      memory: `${memoryValue}MB`,\n      totalJS: memoryValue,\n      timestamp: Date.now()\n    };\n  }\n} "],"names":["MemoryService","tabId","changeInfo","tab","targets","target","error","lastAccess","memoryInfo","results","memoryData","totalJS","errorInfo","heapStats","storedTime","currentTime","tabs","inactiveTime","hibernateUrl","tabInfo","enabled","threshold","stats","totalMemory","url","result","existingTabs","existingTabIds","memoryValue"],"mappings":"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"}