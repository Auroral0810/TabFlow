class c{constructor(){this.memoryThreshold=100*1024*1024,this.hibernatedTabs=new Set,this.memoryStats=new Map,this.lastAccessTimes=new Map,this.debuggerConnections=new Map,this.autoHibernateEnabled=!0,console.log("MemoryService initialized"),this.initializeListeners(),this.initializeDebugger()}async initializeListeners(){chrome.tabs.onUpdated.addListener((e,t,r)=>{t.status==="complete"&&(this.updateTabMemoryInfo(e),this.lastAccessTimes.set(e,Date.now()))}),chrome.tabs.onActivated.addListener(({tabId:e})=>{this.lastAccessTimes.set(e,Date.now())}),setInterval(()=>{this.autoHibernateEnabled&&this.checkAndHibernateTabs()},6e4)}async initializeDebugger(){try{const e=await chrome.debugger.getTargets();console.log("Available debug targets:",e);for(const t of e)t.type==="page"&&!this.debuggerConnections.has(t.tabId)&&await this.attachDebugger(t.tabId)}catch(e){console.error("Failed to initialize debugger:",e)}}async attachDebugger(e){try{await chrome.debugger.attach({tabId:e},"1.3"),console.log(`Debugger attached to tab ${e}`),await chrome.debugger.sendCommand({tabId:e},"Memory.enable"),this.debuggerConnections.set(e,!0)}catch(t){console.error(`Failed to attach debugger to tab ${e}:`,t)}}getInactiveTime(e){const t=this.lastAccessTimes.get(e)||Date.now();return Date.now()-t}async updateTabMemoryInfo(e){try{await this.cleanupStaleData(),console.log(`Updating memory info for tab ${e}`);let t;try{t=await chrome.tabs.get(e)}catch(s){return console.log(`Tab ${e} not found:`,s),this.memoryStats.delete(e),null}if(!await this.checkTabPermission(t.url)){console.log(`No permission to access tab ${e}: ${t.url}`);const s=this.createMemoryInfo(e,t,0);return this.memoryStats.set(e,s),s}if(t.url.startsWith("chrome://"))return console.log(`Skipping chrome:// URL for tab ${e}`),{memory:"0MB",totalJS:0,timestamp:Date.now()};const o=await chrome.scripting.executeScript({target:{tabId:e},func:()=>performance&&performance.memory?{usedJSHeapSize:performance.memory.usedJSHeapSize,totalJSHeapSize:performance.memory.totalJSHeapSize,jsHeapSizeLimit:performance.memory.jsHeapSizeLimit}:null});if(o&&o[0]&&o[0].result){const s=o[0].result,a=Math.round(s.totalJSHeapSize/(1024*1024));console.log(`Tab ${e} memory info:`,{usedJS:`${Math.round(s.usedJSHeapSize/(1024*1024))}MB`,totalJS:`${a}MB`,limitJS:`${Math.round(s.jsHeapSizeLimit/(1024*1024))}MB`});const i={memory:`${a}MB`,totalJS:a,timestamp:Date.now()};return this.memoryStats.set(e,i),i}return{memory:"0MB",totalJS:0,timestamp:Date.now()}}catch(t){console.log("Error in updateTabMemoryInfo:",t);const r=this.createMemoryInfo(e,null,0);return this.memoryStats.set(e,r),r}}async getMemoryInfo(e){try{const t=await chrome.debugger.sendCommand({tabId:e},"Memory.getDOMCounters"),r=await chrome.debugger.sendCommand({tabId:e},"Memory.getPressureLevel");return{...t,pressureLevel:r.level,timestamp:Date.now()}}catch(t){return console.error(`Failed to get memory info for tab ${e}:`,t),null}}async getTabLastAccess(e){try{const r=(await chrome.storage.local.get(`lastAccess_${e}`))[`lastAccess_${e}`];if(r)return r;const o=Date.now();return await chrome.storage.local.set({[`lastAccess_${e}`]:o}),o}catch(t){return console.error("Error getting last access time:",t),Date.now()}}async checkAndHibernateTabs(){const e=await chrome.tabs.query({});for(const t of e)this.shouldHibernate(t)&&await this.hibernateTab(t)}shouldHibernate(e){if(e.active||e.pinned||this.hibernatedTabs.has(e.id))return!1;const t=this.memoryStats.get(e.id),r=this.getInactiveTime(e.id);return t&&t.usedJSHeapSize>this.memoryThreshold&&r>30*60*1e3}async hibernateTab(e){try{await chrome.storage.local.set({[`hibernated_${e.id}`]:{url:e.url,title:e.title,timestamp:Date.now()}});const t=chrome.runtime.getURL("/hibernate.html");await chrome.tabs.update(e.id,{url:t}),this.hibernatedTabs.add(e.id)}catch(t){console.error("休眠标签页失败:",t)}}async restoreTab(e){try{const r=(await chrome.storage.local.get(`hibernated_${e}`))[`hibernated_${e}`];r&&(await chrome.tabs.update(e,{url:r.url}),await chrome.storage.local.remove(`hibernated_${e}`),this.hibernatedTabs.delete(e),this.memoryStats.delete(e))}catch(t){console.error("恢复标签页失败:",t)}}setAutoHibernate(e){this.autoHibernateEnabled=e}setMemoryThreshold(e){this.memoryThreshold=e*1024*1024}getTabMemoryStats(e){const t=this.memoryStats.get(e);return t||{memory:"0MB",totalJS:0,timestamp:Date.now()}}isTabHibernated(e){return this.hibernatedTabs.has(e)}async updateLastAccess(e){const t=Date.now();this.lastAccessTimes.set(e,t),await chrome.storage.local.set({[`lastAccess_${e}`]:t})}async detachDebugger(e){if(this.debuggerConnections.has(e))try{await chrome.debugger.detach({tabId:e}),this.debuggerConnections.delete(e),console.log(`Debugger detached from tab ${e}`)}catch(t){console.error(`Failed to detach debugger from tab ${e}:`,t)}}getSystemMemoryUsage(){let e=0;for(const t of this.memoryStats.values())e+=t.totalJS||0;return e}async checkTabPermission(e){try{if(e.startsWith("chrome://")||e.startsWith("chrome-extension://")||e.startsWith("edge://")||e.startsWith("about:")||e.startsWith("file://"))return!1;const t=await chrome.permissions.contains({origins:[new URL(e).origin+"/*"]});if(!t)try{return await chrome.permissions.request({origins:[new URL(e).origin+"/*"]})}catch(r){return console.log("Permission request failed:",r),!1}return t}catch(t){return console.log("Error checking permission:",t),!1}}async cleanupStaleData(){try{const e=await chrome.tabs.query({}),t=new Set(e.map(r=>r.id));for(const r of this.memoryStats.keys())t.has(r)||this.memoryStats.delete(r);for(const r of this.lastAccessTimes.keys())t.has(r)||this.lastAccessTimes.delete(r);for(const r of this.hibernatedTabs)t.has(r)||this.hibernatedTabs.delete(r)}catch(e){console.error("清理过期数据失败:",e)}}createMemoryInfo(e,t,r){return{memory:`${r}MB`,totalJS:r,timestamp:Date.now()}}}export{c as M};
//# sourceMappingURL=MemoryService.js.map
